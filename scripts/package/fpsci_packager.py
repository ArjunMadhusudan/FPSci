# This script generates a packaging script based on the files used by the last successful run of the program.
# You need to run the generated script to create the distribution directory, then zip that up to send to people.

# Name of the packaging script to generate
outputScript = 'package.sh'

# Path of the log.txt file to use
inputLog = 'data-files/log.txt'

# The list of files that should always be excluded
excludeList = ['log.txt', 'keymap.Any', 'systemconfig.Any']
# The list of files that should be excluded for release builds, but may want to be included for specific experiment distributions
# Use the empty list if you want to distribute an experiment
genericExcludeList = ['experimentconfig.Any', 'startupconfig.Any', 'userconfig.Any', 'userstatus.Any']
# genericExcludeList = []

# List of paths to search for to merge into the same distribution directory
basePath = ['data-files', 'game', 'common']

# Distribution path - where the output script will generate the distribution
distPath = 'dist/'

########## End script configuration ############

from datetime import datetime

if __name__ == '__main__':
    # The log file which lists the files used
    log = open(inputLog)

    # The package script to emit
    packageScript = open(outputScript, 'w')
    packageScript.writelines(['#!/bin/bash\n', '# Autogenerated ' + datetime.now().strftime('%Y %m %d %H:%M:%S\n')])
    packageScript.write('mkdir -p ' + distPath + '\n')

    # Hard coded files to copy
    packageScript.write('cp data-files/g3d-license.txt '  + distPath + '\n')
    # For some reason these files aren't captured by G3D as used
    packageScript.write('mkdir -p dist/shader/DefaultRenderer/\n')
    packageScript.write('cp c:/g3d/G3D10/data-files/shader/DefaultRenderer/DefaultRenderer_OIT_writePixel.glsl dist/shader/DefaultRenderer/\n')
    packageScript.write('mkdir -p dist/shader/UniversalSurface/\n')
    packageScript.write('cp c:/g3d/G3D10/data-files/shader/UniversalSurface/UniversalSurface_depthPeel.pix dist/shader/UniversalSurface/\n')

    # Set up copy of .exe
    packageScript.write('cp Build/FirstPersonScience-x64-Release/FirstPersonScience.exe ' + distPath + '\n')

    # main loop, need to ignore lines before the file list begins
    beforeFiles = True
    for line in log.readlines():
        # In the file list, add this file to what we want to copy
        if not beforeFiles and line != '\n':
            filename = line.strip()
            basename = filename.split('/')[-1]

            # Exclude the lists of files we don't want to package
            if basename in excludeList or basename in genericExcludeList:
                continue
            
            # Absolute path given
            if filename.startswith('C:/') or filename.startswith('c:/'):
                for path in basePath:
                    dest = filename.find(path)
                    if dest > 0:
                        dest += len(path) + 1
                        additionalPath = filename[dest:-len(basename)]
                        # if this file is inside a compressed structure, skip copying it
                        if additionalPath.find('.pk3') > 0 or additionalPath.find('.zip') > 0:
                            break
                        packageScript.write('mkdir -p ' + distPath + additionalPath + '\n')
                        packageScript.write('cp ' + filename + ' ' + distPath + additionalPath + '\n')

            # file is in the PATH, need to find it
            else:
                packageScript.write('cp `which ' + filename + '` ' + distPath + '\n')

        # Find where the filenames start
        if line.startswith('    ###    Files Used    ###'):
            beforeFiles = False


